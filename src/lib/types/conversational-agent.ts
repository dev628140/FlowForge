
/**
 * @fileOverview Type definitions for the conversational agent.
 */

import { z } from 'genkit';

export const ContentSchema = z.union([
  z.object({ text: z.string() }),
  z.object({ media: z.object({ url: z.string() }) }),
]);
export type Content = z.infer<typeof ContentSchema>;

export const MessageSchema = z.object({
  role: z.enum(['user', 'model']),
  content: z.array(ContentSchema),
});
export type Message = z.infer<typeof MessageSchema>;

export const TaskSchema = z.object({
  id: z.string(),
  title: z.string(),
  order: z.number().optional(),
  scheduledDate: z.string().optional(),
  completed: z.boolean().optional(),
  description: z.string().optional(),
});

export const ConversationalAgentInputSchema = z.object({
  history: z.array(MessageSchema).describe("The conversation history."),
  prompt: z.string().describe("The user's latest prompt."),
  initialContext: z.string().optional().describe("An initial prompt to set the context for the agent (e.g., 'You are a productivity coach')."),
  taskContext: z.any().optional().describe("Additional context about the user's current tasks or state."),
  imageDataUri: z.string().optional().describe("An optional image provided by the user as a data URI."),
  activeTool: z.string().optional().describe("The tool the user has manually selected to be active for the conversation."),
});
export type ConversationalAgentInput = z.infer<typeof ConversationalAgentInputSchema>;


const TaskToAddSchema = z.object({
    title: z.string().describe('The title of the task.'),
    description: z.string().optional().describe('A brief description of the task.'),
    scheduledDate: z.string().optional().describe('The scheduled date for the task in YYYY-MM-DD format if a timeframe is provided.'),
    scheduledTime: z.string().optional().describe('The scheduled time for the task in HH:mm format if provided.'),
});

const TaskToUpdateSchema = z.object({
    taskId: z.string().describe("The ID of the task to update."),
    updates: z.object({
        title: z.string().optional(),
        description: z.string().optional(),
        completed: z.boolean().optional(),
        scheduledDate: z.string().optional(),
        order: z.number().optional(),
    }).describe("The fields to update.")
});

const TaskToDeleteSchema = z.object({
    taskId: z.string().describe("The ID of the task to delete."),
});


export const ConversationalAgentOutputSchema = z.object({
  response: z.string().describe("The agent's text response to the user."),
  tasksToAdd: z.array(TaskToAddSchema).optional().describe("A list of new tasks to be added."),
  tasksToUpdate: z.array(TaskToUpdateSchema).optional().describe("A list of tasks to be updated."),
  tasksToDelete: z.array(TaskToDeleteSchema).optional().describe("A list of tasks to be deleted."),
});
export type ConversationalAgentOutput = z.infer<typeof ConversationalAgentOutputSchema>;


// Schemas for Natural Language Task Planning
export const NaturalLanguageTaskPlanningInputSchema = z.object({
  goal: z.string().describe('The overall goal to be achieved, which may include a timeframe or specific tasks to schedule.'),
});
export type NaturalLanguageTaskPlanningInput = z.infer<typeof NaturalLanguageTaskPlanningInputSchema>;

const NlpTaskSchema = z.object({
    title: z.string().describe('The title of the task.'),
    description: z.string().optional().describe('A brief description of the task.'),
    scheduledDate: z.string().optional().describe('The scheduled date for the task in YYYY-MM-DD format if a timeframe is provided.'),
    scheduledTime: z.string().optional().describe('The scheduled time for the task in HH:mm format if provided.'),
});

export const NaturalLanguageTaskPlanningOutput = z.object({
  tasks: z.array(NlpTaskSchema).describe('List of tasks generated by the AI, potentially with scheduled dates.'),
});
export type NaturalLanguageTaskPlanningOutput = z.infer<typeof NaturalLanguageTaskPlanningOutput>;
